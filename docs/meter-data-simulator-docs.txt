üìò Project Name: Simulated Meter Data Server
üìå Overview
This project enables simulation and control of meter-level energy data based on a digital mapping of Energy Resources (ERs) and Meters. The system supports:
Creation of Energy Resources (with multiple appliances)
Creation and hierarchical structuring of Meters


Linking meters with ERs


Generating and aggregating real-time energy data
Controlling meters dynamically with a scaling factor (load_factor)




Link: 
https://drive.google.com/file/d/1BdWBR_G_kX4e3dpwdaBtLm_l0kuYkZoc/view?usp=sharing

üåø Children: Energy Resources and MDMS Meters
1. ER (Energy Resource)
Definition: Refers to a unit (residential, commercial, or industrial) that consumes and/or produces energy.


Types:


Consumer ‚Äì Only consumes energy.


Prosumer ‚Äì Consumes and produces energy (e.g., solar rooftop users).


Attributes:


Location data (city, state, GPS)


Appliance types and electrical load


Role: Acts as the origin or endpoint of energy use or generation.


2. MDMS Meter
Full Form: Meter Data Management System Meter


Definition: A smart meter device installed at each ER, capable of real-time energy measurement and digital data communication.


Functionality:


Captures:


Energy consumption (kWh)


Energy production (for prosumers)


Voltage, current, power quality


Sends Data Streams to upstream transformers/feeders


Supports remote reading, tamper detection, and two-way communication


Integration:


Interfaces with MDMS backend systems for storage, analytics, and visualization.



üèóÔ∏è Parent: Transformer / Feeder
3. Transformer / Feeder
Definition: Intermediate nodes in the power distribution network that aggregate, step-down, or route electrical and telemetry data.


Components:


Transformer: Steps down voltage levels from medium/high to low voltage suitable for end-user consumption.


Feeder: Conducts and distributes electricity from the transformer to a cluster of Energy Resources.


Roles:


Electrical Distribution:


Ensures stable voltage supply to local ERs


Balances load across multiple feeders to prevent overloading


Data Aggregation:


Collects data streams from all MDMS meters under its scope


Acts as a consolidation and relay node in the hierarchy


Fault Detection & Monitoring:


Helps isolate faults and measure transformer health


Enables sectional monitoring for outage management


Upstream Communication: Sends aggregated data to the utility company's central systems.



üèõÔ∏è Grandparent: Utility Company
4. Utility Company
Definition: The central authority or backend system responsible for operating the electric grid and managing energy consumption, billing, and analytics.


Responsibilities:


Collects and processes data from multiple feeders/transformers


Performs:


Load forecasting


Dynamic pricing


Demand response programs


Grid health analytics


Supports energy policy enforcement and SLA monitoring


Core Systems:


Meter Data Management System (MDMS)


SCADA for grid automation


Billing and CRM systems



üîÅ Data Streams
Definition: Digital, real-time streams of telemetry data sent from MDMS meters ‚Üí Transformer/Feeder ‚Üí Utility.


Content:


Timestamped energy metrics (kWh, voltage, current)


Meter health and operational status


Error logs or tamper alerts


Transport:


Typically uses secure IoT protocols (MQTT, HTTPS, etc.)


Encrypted for privacy and reliability





üóÉÔ∏è SCHEMA DESIGN
1. Energy Resource (ER)
Field
Data Type
Description
id
Integer
Unique identifier for the Energy Resource
name
string
Descriptive name of the ER e.g Viraj‚Äôs Home
type
enum
Either consumer or prosumer 
appliance_type
string
Array of appliances [‚ÄòAC‚Äù, ‚ÄúRefrigerator‚Äù, ‚ÄúTelevision‚Äù,‚Äô]
created_at
datetime (ISO 8601)
Timestamp when the ER was created

2. Meter
Field
Data Type
Description
id
Integer
Unique identifier for the meter
Meter ID
string
Meter ID of the meter
parent_id
Integer
If child meter, contains parent meter ID
load_factor_consumption
float
Load scaling constant K
load_factor_production
float
Load scaling constant K
meter_type
enum
Type of meter installed 1-Ph, 3-Ph, Smart, net-meter
created_at
datetime (ISO 8601)
Timestamp when the meter was created
city
string
City where the Meter is located
state
string
State where the Meter is located
latitude
float
Latitude coordinate
longitude
float
Longitude coordinate
pincode
String
Pincode of the location where Meter is located

3. MeterData (Generated Data Records)
Field
Data Type
Description
meter_id
Integer
Reference to the meter
timestamp
datetime
When the record was generated
consumption_kWh
float or null
Energy consumed (active)
production_kWh
float or null
Energy produced (active)
consumption_kVAh
float or null
Apparent energy drawn
production_kVAh
float or null
Apparent energy sent back
avg_current
float
Current in amperes
avg_voltage
float
Voltage in volts
reactive_power_kVAR
float or null
Reactive power during the interval
power_factor
float or null
Efficiency ratio (between 0 and 1)

4. MeterERLink ( Not needed)
Field
Data Type
Description
id
UUID (string)
Unique ID for the link record
meter_id
Integer
Reference to the Meter.id
er_id
Integer
Reference to the ElectricalResource.id
linked_at
datetime (ISO 8601)
Timestamp when the link was created

5. P2PTrade
Field
Type
Description
id
UUID
Unique trade ID
buyer_meter_id
UUID
Consumer meter ID
seller_meter_id
UUID
Prosumer meter ID
units_kWh
float
Energy traded in kWh
price_per_kWh
float
Negotiated P2P price
timestamp
datetime
Time of trade (simulation time)

6. Bill

Field
Type
Description
id
UUID
Bill ID
meter_id
UUID
Meter ID
type
enum
consumer or prosumer
month
string
Billing period (e.g., "2025-05")
total_consumed_kWh
float
Total energy consumed
total_produced_kWh
float
Total energy produced
p2p_kWh
float
P2P energy traded
grid_units_used_kWh
float
Grid-supplied units
grid_units_exported_kWh
float
Exported to grid
grid_rate
float
‚Çπ/kWh
grid_credit_rate
float
‚Çπ/kWh credited for exports
p2p_cost
float
Paid to others (consumer)
p2p_earning
float
Earned from others (prosumer)
amount_due
float
Final due (or refund if negative)
generated_at
datetime
Time of billing

7. SimulationClock
Field
Type
Description
current_datetime
datetime
Current simulation time

You only need one record here. This is incremented every real minute to simulate a day.
‚öôÔ∏è DATA GENERATION LOGIC
Generation starts only after a meter is linked to an ER
ER type determines:


consumer ‚Üí only consumption_kWh


prosumer ‚Üí both consumption_kWh and production_kWh


Parent meters do not generate independent data, but aggregate child data


Controlled via load_factor (K):


0: Meter is OFF


0 < K ‚â§ 1: Output scaled down


K > 1: Output amplified
üß† 1. Assumptions
Parameter
Meaning
K
load_factor from the meter
status
ON or OFF; if OFF ‚Üí no data is generated
type (ER)
consumer ‚Üí only consumption data
prosumer ‚Üí both consumption and production
base_kWh
Base real energy drawn/produced per minute (depends on appliance)
voltage
Simulated average voltage (~230‚Äì250V)
current
Simulated average current (depends on load)


Base_kwh Chart
Appliance
Power Rating (Watts)
Approx. base_kWh per minute
Description
LED Bulb (10W)
10W
0.00017
Very low-power appliance
Ceiling Fan
75W
0.00125
Common residential usage
Television (LED)
120W
0.002
Entertainment
Refrigerator
200W (cyclic)
0.00333
Compressor cycles ON/OFF
Laptop Charger
65W
0.00108
Varies by model
Microwave Oven
1000W
0.01667
High-power but short usage
Washing Machine
500W (avg.)
0.00833
Motor + water heater load
Air Conditioner (1.5 Ton)
1500W (avg.)
0.025
High-power appliance
Room Heater
2000W
0.03333
Constant high power
Electric Geyser
3000W
0.05
Very high-demand heating
Water Pump
750W
0.0125
Moderate mechanical load
Solar Panel (production)
~1200W
0.02
Only for Production


Note : 
Based on Appliance a particular DER is having, calculate the base_kwH ( sum of all appliance)

üîÑ 2. Generic Formula Setup (per minute)
üëâ Consumption kWh
energy_kWh = base_kWh * K
For example: If base_kWh is 0.1 (i.e., 100 Wh per minute), and K = 0.5 ‚Üí 0.05 kWh
üëâ Production kWh
Adjust solar production using time-of-day multiplier (0 to 1)

üëâ Apparent Energy (kVAh)
power_factor = random between 0.8 to 1.0
kVAh = kWh / power_factor

üëâ Reactive Power (kVAR)
kVAR = sqrt(kVAh**2 - kWh**2)
This applies to both consumption and production
üëâ Current and Voltage Simulation
voltage = random between 230 and 250
current = (kWh * 1000) / (voltage * 1 * 60)  # simplified P = VI * time


üß† BILLING LOGIC
For Prosumer
total_consumed = sum(consumption_kWh)
total_produced = sum(production_kWh)
total_p2p_sold = sum(units_kWh from trades where seller_meter_id)
grid_exported = total_produced - total_p2p_sold
grid_used = total_consumed  # Full consumption goes to consumer side billing

grid_earning = grid_exported * grid_credit_rate
p2p_earning = total_p2p_earning

grid_bill = grid_used * grid_rate
amount_due = grid_bill - (grid_earning + p2p_earning)

If amount_due is negative ‚Üí refund to prosumer.

For Consumer
total_consumed = sum(consumption_kWh)
total_p2p_bought = sum(units_kWh from trades where buyer_meter_id)
grid_used = total_consumed - total_p2p_bought

grid_bill = grid_used * grid_rate
p2p_cost = sum(p2p trades price * units)

amount_due = grid_bill + p2p_cost


üîå API Design
POST /create-der
POST /create-er ( already exist)

UPDATE /toggle-der-status
 
LIST
1. POST /admin/er
Create a new Energy Resource.
{
  "name": "Viraj‚Äôs Home",
  "type": "prosumer",
  "appliance_type": ["Refrigerator", "Oven"]
}
2. UPDATE/admin/er/<er_id>
Update a new Energy Resource.
{
  "name": "Viraj‚Äôs Home",
  "type": "prosumer",
  "appliance_type": ["Refrigerator", "Oven", ‚ÄúSolar Panel‚Äù] // this will replace the appliance type
}

2. POST /admin/meter
Create a new Meter
{
  "meter_id": "MT30125", //unique
  "parent_id": null,
  "load_factor": 1.0, (K), // by default
  "meter_type": "1-Ph",
  "city": "Mumbai",
  "state": "Maharashtra",
  "latitude": 19.0760,
  "longitude": 72.8777,
  "pincode": ‚Äú227409‚Äù,
}

3. POST /admin/meter/link
Link a meter to an ER.
{
  "meter_id": "id-of-meter",
  "er_id": "id-of-er"
}
Load Factor Consumption will be 1 by default
IF ER type is prosumer, then Load factor production will be 1 by default, else 0
Triggers data generation logic.

4. GET /meter/stream?meter_id=<id>
Stream meter data.
Returns real-time simulated data


For parent meters ‚Üí returns aggregated child data


Example Response:
[
  {
  "meter_id": "uuid-1234",
  "timestamp": "2025-05-07T10:00:00Z",
  "consumption_kWh": 1.23,
  "production_kWh": 0.44,
  "consumption_kVAh": 1.45,
  "production_kVAh": 0.52,
  "avg_current": 5.3,
  "avg_voltage": 239.8,
  "reactive_power_kVAR": 0.85,
  "power_factor": 0.85
},
  ...
]


5. POST /meter/control
Control the load factor of a meter or group of meters.
{
  "meter_id": "uuid-of-specific-meter (optional)",
  "parent_meter_id": "uuid-of-parent-meter (optional)",
  "appliance_type": "AC (optional)",
  ‚Äúpincode‚Äù : ‚Äú227409‚Äù (optional), 
  "load_factor": 0.5, // 0, 1, 2, 1.5, 0,6
  "log_type": "consumption"  // or "production" or "both"
}
6. POST /p2p-trade
Create a new P2P trade
Request:
{
  "buyer_meter_id": "uuid1",
  "seller_meter_id": "uuid2",
  "units_kWh": 5.0,
  "price_per_kWh": 5.5
}

Response:
{
  "status": "success",
  "message": "Trade posted successfully"
}

7. GET /bill?meter_id=<uuid>&month=YYYY-MM
Generate bill for a meter (consumer or prosumer)
Response (prosumer):
{
  "type": "prosumer",
  "total_consumed_kWh": 100.0,
  "total_produced_kWh": 120.0,
  "p2p_kWh": 40.0,
  "grid_units_used_kWh": 100.0,
  "grid_units_exported_kWh": 80.0,
  "amount_due": -190.0
}
Response (consumer):
{
  "type": "consumer",
  "total_consumed_kWh": 150.0,
  "p2p_kWh": 30.0,
  "grid_units_used_kWh": 120.0,
  "grid_rate": 6.0,
  "p2p_cost": 150.0,
  "amount_due": 870.0
}
8. GET /simulation-time
Return current simulation time
Response:
{
  "current_datetime": "2025-06-20T00:00:00Z"
}
‚ö° Transformer Feasibility Simulation Server (San Francisco)
üåç Use Case
Simulate whether new electrical connections can be supported by the nearby transformers without overload or voltage issues. Designed for:
Consumers (only draw power)
Prosumers (draw and inject power via solar rooftops)

üóÉÔ∏è DATABASE SCHEMA
1. Transformer
Field
Type
Description
id
UUID
Unique transformer ID
name
string
Identifier or label (e.g., TX-101)
capacity_kVA
float
Total rated capacity of the transformer (e.g., 1000 kVA)
city
string
Always San Francisco in this case
latitude
float
Location for mapping
longitude
float
Location for mapping
connected_consumption_kW
float
Total connected consumption load (updated dynamically)
connected_production_kW
float
Total injected power from prosumers

2. Connection
Field
Type
Description
id
UUID
Unique request ID
type
enum
consumer or prosumer
requested_consumption_kW
float
Proposed load (kW) if consumer/prosumer
requested_production_kW
float
Proposed solar export capacity (only if prosumer)
status
enum
pending, approved, rejected
reason
string or null
Rejection reason
transformer_id
UUID
Linked transformer if approved
created_at
datetime
Timestamp of request


üîÑ LOAD LOGIC
‚úÖ Consumption Check
if (connected_consumption_kW + requested_consumption_kW) <= (capacity_kVA * 0.8):
    allow connection
else:
    reject with reason "Transformer overloaded for consumption"
‚úÖ Production Check (for Prosumers)
if (connected_production_kW + requested_production_kW) <= (capacity_kVA * 0.3):
    allow rooftop export
else:
    reject with reason "Transformer cannot support additional solar injection"
Conservative thresholds (80% for draw, 30% for injection) mimic real utility safety buffers.

üîß API DESIGN
1. POST /connection
Create a new connection (consumer or prosumer)
‚úÖ Request Body
{
  "type": "prosumer", // ‚Äúconsumer‚Äù
  "requested_consumption_kW": 15.0,
  "requested_production_kW": 8.0,
  "latitude": 37.7749,
  "longitude": -122.4194
}
For consumers, requested_production_kW can be omitted or 0.0.
If it passes feasibility check, Add requested_consumption_KW and requested_production_KW to transformer‚Äôs connected_consumer_KW and connected_production_KW.
‚úÖ Success Response
{
  "status": "approved",
  "assigned_transformer": "TX-101",
  "transformer_id": "uuid-abc",
  "message": "Connection successfully created and linked to transformer TX-101"
}
‚ùå Rejection Response (Overload: Consumer)
{
  "status": "rejected",
  "reason": "Transformer overloaded for consumption"
}
‚ùå Rejection Response (Overload: Production)
{
  "status": "rejected",
  "reason": "Transformer cannot support additional solar injection"
}

2. POST /feasibility-check
Check feasibility without applying the connection.
‚úÖ Request Body
{
  "type": "consumer",
  "requested_consumption_kW": 10.0,
  "requested_production_kW": 0.0,
  "latitude": 37.776,
  "longitude": -122.42
}

‚úÖ Success Response
{
  "status": "feasible",
  "nearest_transformer": {
    "id": "uuid-abc",
    "name": "TX-101",
    "distance_meters": 310.5,
    "spare_consumption_capacity": 215.0,
    "spare_production_capacity": 65.0
  }
}

Note: 

spare_consumption_capacity = (capacity_kVA * 0.8) - connected_consumption_kW
spare_production_capacity = (capacity_kVA * 0.3) - connected_production_kW
‚ùå Failure Response
{
  "status": "not_feasible",
  "reason": "No transformer nearby can support this load safely"
}

üåê Logic to Assign Transformer
Compute distance from user's coordinates to all transformer locations (using Haversine formula)
Sort by distance


Assign the first transformer with available capacity


Update the transformer's connected_ fields  -> if approved ( connected_consumption_KWA and connection_production_Kwa)



Pending
Payment 
Simulate Payment ( useful - for - p2p trade)  - We can skip
Policy 
Eryn se connect -  for policy - We can skip
There should be an API where user post their p2p trade



Note for world engine
1. Addition or removal of a solar panel to a household ( after its purchase, installation, connection to grid ) should change the output waveform of the meter with more push of energy than the usual pull.  - Taken into consideration

2. Addition of any ER ( load like an EV  or source like solar panel) behind the meter (also an ER) should update the waveform accordingly. - Already discussed in point 1 - taken into consideration

3. The solar ER output should vary with the time of day ( means production should vary within time of day - would be complex)

4. When someone buys a solar panel the solar panel must get linked to the house only after installation and connection - The Agent has to ensure this validation. Once it is ready for linking, they can call /update-er endpoint to add/remove solar panel or any other appliance

5. The moment the solar panel is installed and connected, it should update the output waveform to a solarized house waveform - Already covered in point 1 & point 3

6. Check if multiple types of loads such as offices, apartment complexes

7. An API to introduce sudden load spikes in the output waveform

8. Source spikes introduced when a new source is added - like a solar farm



SN
Endpoint
% of Completion
Estimated Date of Delivery
1.
POST /create-er
100 %


2. 
POST /create-meter
100 %


3.
POST /link-meter
100 %


4.
GET /stream-meter-data
60%
11th May
5.
POST /control-meter-load (updating K value)
0
10th May
6. 
POST /p2p-trade ( POST p2p trade)
0
10th May
7.
GET /bill (generate bill)
0
11th May
8.
GET /simulation-calender (Get current date)
0
11th May
9.
POST /connection (create connection)
0
11th May
10.
POST /feasibility-check (check feasibility)
0
11th May


Design : Nothing started as requirement clarity is still in progress
Non Beckn Endpoint : 
Understanding document based on discussion we had on 7 & 8th May, 2025 - is available here
Challenge : Have gone through the Agentic chat experience document created by Eryn, looks like the API endpoint we discussed and developing is not aligning with the flows discussed in the document.


DEG Sandbox on GCP : 



